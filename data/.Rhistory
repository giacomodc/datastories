w
e
r
e <- -2/3 * e
q
w
e
r
r <- r+1/2*e
q
w
e
r
r <- 3*r
q
w
e
r
q <- q+e
q
w <- w-1/2*e
w
e
ab
abi <- rbind(c(0,0,-1,1),c(0,0,0,1),c(1,0,-1,1),c(0,1,-1,3))
ab %*% abi
abi
solve(ab)
abi %*% a
abi
y <- c(0,-1,1,-3)
y
a
y %*% a
ya <- y%*%a
ya
b <- rbind(0,0,0,1)
b
yb <- y %*% b
yb
ya
ab <- rbind(c(-1,-6,1,0,0),c(-1,-1,0,1,0),c(-1,-3,0,0,1),c(-1,7,0,0,0),c(0,1,0,0,0))
cb <- rbind(-1,0,0,0,0)
abi <- solve(ab)
abi %*% cb
y <- abi %*% cb
y
c <- rbind(1,-1,0,0,0,0,0,0,0)
y
a
a <- rbind(c(1,-1,-6,-7,-1,1,0,0,0),c(1,-1,-1,2,0,0,1,0,0),c(1,-1,-3,-5,8,0,0,1,0),c(1,-1,7,-3,-2,0,0,0,1),c(0,0,1,1,1,0,0,0,0))
a
y
t(y)
c
t(c)-t(y)%*%a
abi
y <- t(abi) %*% cb
y
t(c)- t(y)%*%a
a <- rbind(c(1,-1,0,2,-3,1,0,0),c(1,-1,-2,0,3,0,1,0),c(1,-1,1,-1,0,0,0,1),c(0,0,1,1,1,0,0,0))
a
ab <- rbind(c(-1,0,1,0),c(-1,-2,0,1),c(-1,1,0,0),c(0,1,0,0))
cb <- rbind(-1,0,0,0)
ab
abi
abi <- solve(ab)
abi
y <- t(abi)%*%cb
y
cb
abi
abi %*% cb
t(abi)
y
y
c <- c(1,-1,0,0,0,0,0,0)
c-t(y)%*%a
b <- rbind(0,0,0,1)
b
t(y)%*%b
y%*%b
t(y)%*%b
a
a <- rbind(c(-1,1,0,2,1,0,0,-1),c(0,0,1,1,1,0,0,0),c(0,0,0,4,-2,1,0,-1),c(0,0,0,4,6,0,1,-1))
ab <- rbind(c(1,0,2,0),c(0,1,1,0),c(0,0,4,0),c(0,0,4,1))
solve(ab) %*% a
a <- solve(ab) %*% a
a
ab <- rbind(c(0,0,2,0),c(1,0,3/2,0),c(0,1,-1/2,0),c(0,0,8,1))
ab
solve(ab) %*% a
a <- solve(ab) %*% a
ab <- rbind(c(3/4,1,0,0),c(-1/4,0,1,0),c(-1/2,0,0,1),c(4,0,0,0))
solve(ab) %*% a
a <- solve(ab) %*% a
a
ab <- a[c(3,4,5,6)]
ab
a[3]
a[1,2]
a[,c(3,4,5,6)]
ab <- a[,c(3,4,5,6)]
ab
solve(ab) %*% a
a <- solve(ab) %*% a
ab <- a[,c(1,3,4,5)]
solve(ab) %*% a
a <- rbind(c(-1,1,0,2,1,0,0,-1),c(0,0,1,1,1,0,0,0),c(0,0,0,4,-2,1,0,-1),c(0,0,0,4,6,0,1,-1))
b <- rbind(1,1,1,3)
a
b/a[,4]
ab <- a[,c(2,3,4,7)]
ab
b <- b-1/4*a[,4]
b
ab
solve(ab) %*% a
a <- solve(ab) %*% a
a
b/a[,5]
b
b <- rbind(1/2,3/4,1/4,2)
b
a
b/a[,5]
ab <- a[,c(3,4,5,7)]
a <- solve(ab) %*% a
a
b
b
b-1/4*c(2,3/2,-1/2,8)
b <- c(3/8,3/8,1/4,0)
ab
a
b/a[,1]
ab <- a[,c(1,3,4,5)]
ab
a <- solve(ab) %*% a
a
a
a <- rbind(c(1,-1,0,2,-3,1,0,0),c(1,-1,-2,0,3,0,1,0),c(1,-1,1,-1,0,0,0,1),c(0,0,1,1,1,0,0,0))
x <- rbind(0,1,1,0,0,1,3,0)
a %*% x
a <- rbind(c(1,-1,-6,-7,-1,1,0,0,0),c(1,-1,-1,2,0,0,1,0,0),c(1,-1,-3,-5,8,0,0,1,0),c(1,-1,7,-3,-2,0,0,0,1),c(0,0,1,1,1,0,0,0,0))
a
ab <- a[,c(2,3,6,7,8)]
solve(ab) %&% a
solve(ab) %*% a
a <- solve(ab) %*% a
b <- rbind(7,1,13,8,10)
b/a[,4]
ab <- a[,c(2,3,4,6,8)]
b <- rbind(11/3, 5/13,8/13,97/13,66/13)
b
a <- solve(ab) %*% a
a
b/a[,5]
b
a <- rbind(c(3/4,-3/4,1,0,0,1/8,0,5/8),c(-1/4,1/4,0,1,0,1/8,0,-3/8),c(-1/2,1/2,0,0,1,-1/4,0,-1/4),c(4,-4,0,0,0,1,1,2))
a
b <- rbind(3/8,3/8,1/4,0)
b
b/a[,6]
ab <- a[,c(3,4,5,6)]
ab
a <- solve(ab) %*% a
a
b/a[,8]
ab <- a[,c(3,4,5,8)]
ab
a <- solve(ab)%*% a
a
3/16
5/16
b
a <- rbind(c(-1,1,0,0,2,-1/2,0,-1/2),c(0,0,1,0,3/2,-1/4,0,1/4),c(0,0,0,1,-1/2,1/4,0,-1/4),c(0,0,0,0,8,-1,1,0))
a
b <- rbind(1/2,3/4,1/4,2)
b/a[,5]
ab <- a[,c(3,4,5,7)]
ab
solve(ab) %*% a
ab <- a[,c(2,3,4,5)]
ab
solve(ab) %*% a
b
b-1/4*a[,5]
a
a <- rbind(c(1,-1,0,2,-1,1,0,0),c(1,-1,-2,0,1,0,1,0),c(1,-1,1,-1,0,0,0,1),c(0,0,1,1,1,0,0,0))
a
ab <- a[,c(2,3,6,7)]
solve(ab) %*% a
a <- solve(ab) %*% a
ab <- a[,c(2,3,4,7)]
ab
a
ab
a <- solve(ab) %*% a
a
ab <- a[,c(3,4,5,7)]
solve(ab) %*% a
ab <- a[,c(2,3,4,5)]
a
ab
solve(ab) %*% a
a <- rbind(c(1,-1,0,2,-1,1,0,0),c(1,-1,-1,0,1,0,1,0),c(1,-1,1,-2,0,0,0,1),c(0,0,1,1,1,0,0,0))
a
a
b <- rbind(1,1,1,2)
ab <- a[,c(2,3,6,7)]
ab
a <- solve(ab) %*% a
a
b
b/a[,4]
a
b - 1/5 * a[,4]
b <- rbind(2/5,4/5,1/5,6/5)
b
ab
ab <- a[,c(2,3,4,7)]
ab
a <- solve(ab) %*% a
a
b
b/a[,5]
ab <- a[,c(2,3,4,5)]
solve(ab) %*% a
b
b-2/5*a[,5]
a <- solve(ab) %*% a
a
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
dat <- read.csv('data/final.csv',stringsAsFactors = FALSE, header=T)
setwd("~/Desktop/SMART/datastories")
dat <- read.csv('data/final.csv',stringsAsFactors = FALSE, header=T)
qtime_np <- dat[dat[,"mall"]=="np" & !is.na(dat[,"qtime"]) & !is.na(dat[,"park_location"]) & dat[,"park_location"]=="LB" & dat[,"qtime"]<=45,"qtime"]
qtime_tp <- dat[dat[,"mall"]=="tp" & !is.na(dat[,"qtime"]) & !is.na(dat[,"park_location"]) & dat[,"park_location"]=="LB" & dat[,"qtime"]<=45,"qtime"]
tmp <- data.frame(x=c(qtime_tp, qtime_np), fac=c(rep(1,length(qtime_tp)), rep(2,length(qtime_np))))
tmp$fac <- as.factor(tmp$fac)
qtime_plot <- ggplot(tmp, aes(x, linetype = fac)) + stat_ecdf(size=1) +
ggtitle("Queueing time cumulative distribution") + theme_bw() + xlab("Time (minutes)") + ylab("Fraction")+
theme(
axis.title.x = element_text(size=23),
axis.text.x  = element_text(size=20),
axis.title.y = element_text(size=23),
axis.text.y  = element_text(size=20),
plot.title = element_text(size=27, face="bold") ) +
scale_x_continuous(breaks = round(seq(min(c(qtime_np, qtime_tp)), max(c(qtime_np, qtime_tp)), by = 5),1))
qtime_plot
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?stat_ecdf
shiny::runApp()
View(tmp)
qtime_np <- dat[dat[,"mall"]=="np" & !is.na(dat[,"qtime"]) & !is.na(dat[,"park_location"]) & dat[,"park_location"]=="LB" & dat[,"qtime"]<=45,"qtime"]
qtime_tp <- dat[dat[,"mall"]=="tp" & !is.na(dat[,"qtime"]) & !is.na(dat[,"park_location"]) & dat[,"park_location"]=="LB" & dat[,"qtime"]<=45,"qtime"]
tmp <- data.frame(x=c(qtime_tp, qtime_np), fac=c(rep(1,length(qtime_tp)), rep(2,length(qtime_np))))
View(tmp)
View(dat)
qtime_np <- dat[dat[,"mall"]=="np" & !is.na(dat[,"qtime"]) & !is.na(dat[,"park_location"]) & dat[,"park_location"]=="LB" & dat[,"qtime"]<=45,"qtime"]
qtime_tp <- dat[dat[,"mall"]=="tp" & !is.na(dat[,"qtime"]) & !is.na(dat[,"park_location"]) & dat[,"park_location"]=="LB" & dat[,"qtime"]<=45,"qtime"]
tmp <- data.frame(x=c(qtime_tp, qtime_np), fac=c(rep(1,length(qtime_tp)), rep(2,length(qtime_np))))
tmp$fac <- as.factor(tmp$fac)
qtime_plot <- ggplot(tmp, aes(x, linetype = fac)) + stat_ecdf(size=1) +
ggtitle("Queueing time cumulative distribution") + theme_bw() + xlab("Time (minutes)") + ylab("Fraction")+
theme(
axis.title.x = element_text(size=23),
axis.text.x  = element_text(size=20),
axis.title.y = element_text(size=23),
axis.text.y  = element_text(size=20),
plot.title = element_text(size=27, face="bold") ) +
scale_x_continuous(breaks = round(seq(min(c(qtime_np, qtime_tp)), max(c(qtime_np, qtime_tp)), by = 5),1))
qtime_plot
qtime_plot <- ggplot(tmp, aes(x, linetype = fac)) + geom_step(stat='ecdf') +
ggtitle("Queueing time cumulative distribution") + theme_bw() + xlab("Time (minutes)") + ylab("Fraction")+
theme(
axis.title.x = element_text(size=23),
axis.text.x  = element_text(size=20),
axis.title.y = element_text(size=23),
axis.text.y  = element_text(size=20),
plot.title = element_text(size=27, face="bold") ) +
scale_x_continuous(breaks = round(seq(min(c(qtime_np, qtime_tp)), max(c(qtime_np, qtime_tp)), by = 5),1))
qtime_plot
shiny::runApp()
qtime_plot <- ggplot(tmp, aes(x, linetype = fac)) + stat_bin(geom='stat') +
ggtitle("Queueing time cumulative distribution") + theme_bw() + xlab("Time (minutes)") + ylab("Fraction")+
theme(
axis.title.x = element_text(size=23),
axis.text.x  = element_text(size=20),
axis.title.y = element_text(size=23),
axis.text.y  = element_text(size=20),
plot.title = element_text(size=27, face="bold") ) +
scale_x_continuous(breaks = round(seq(min(c(qtime_np, qtime_tp)), max(c(qtime_np, qtime_tp)), by = 5),1))
qtime_plot <- ggplot(tmp, aes(x, linetype = fac)) + stat_bin(geom='step') +
ggtitle("Queueing time cumulative distribution") + theme_bw() + xlab("Time (minutes)") + ylab("Fraction")+
theme(
axis.title.x = element_text(size=23),
axis.text.x  = element_text(size=20),
axis.title.y = element_text(size=23),
axis.text.y  = element_text(size=20),
plot.title = element_text(size=27, face="bold") ) +
scale_x_continuous(breaks = round(seq(min(c(qtime_np, qtime_tp)), max(c(qtime_np, qtime_tp)), by = 5),1))
qtime_plot
qtime_plot <- ggplot(tmp, aes(x, linetype = fac)) + stat_bin(aes(y=cumsum(..count..)),geom='step') +
ggtitle("Queueing time cumulative distribution") + theme_bw() + xlab("Time (minutes)") + ylab("Fraction")+
theme(
axis.title.x = element_text(size=23),
axis.text.x  = element_text(size=20),
axis.title.y = element_text(size=23),
axis.text.y  = element_text(size=20),
plot.title = element_text(size=27, face="bold") ) +
scale_x_continuous(breaks = round(seq(min(c(qtime_np, qtime_tp)), max(c(qtime_np, qtime_tp)), by = 5),1))
qtime_plot
qtime_plot <- ggplot(tmp, aes(x, linetype = fac)) + stat_bin(aes(y=cumsum(..count..)/..count..),geom='step') +
ggtitle("Queueing time cumulative distribution") + theme_bw() + xlab("Time (minutes)") + ylab("Fraction")+
theme(
axis.title.x = element_text(size=23),
axis.text.x  = element_text(size=20),
axis.title.y = element_text(size=23),
axis.text.y  = element_text(size=20),
plot.title = element_text(size=27, face="bold") ) +
scale_x_continuous(breaks = round(seq(min(c(qtime_np, qtime_tp)), max(c(qtime_np, qtime_tp)), by = 5),1))
qtime_plot
shiny::runApp()
shiny::runApp()
shiny::runApp()
dat <- read.csv('data/final.csv',stringsAsFactors = FALSE, header=T)
View(dat)
shiny::runApp()
shiny::runApp()
?ggplot
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
<<<<<<< HEAD
=======
library(rsconnect)
rsconnect::deployApp('/Users/GZQ/Desktop/SMART/datastories/')
shiny::runApp()
shiny::runApp()
>>>>>>> giacomodc/master
shiny::runApp()
install.packages("shinythemes")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(leaflet)
m <- leaflet()
m
m <- addProviderTiles(m, "Stamen.TonerLite", options = providerTileOptions(noWrap = TRUE) )
m
?addProviderTiles
setwd("/Users/giacomodc/Dropbox/PhD/datastories/data")
malls <- read.csv("shopping_malls.csv", stringsAsFactors = FALSE, header=T, na.strings=c("","NA"))
tmp <- malls[malls[,"open_close"]=="open" & !is.na(malls[,"lat"]) & malls[,"type"]=="mall",]
tmp$circle_size <- NA
shiny::runApp('~/Dropbox/PhD/datastories')
rm(list = ls())
library(leaflet)
setwd("/Users/giacomodc/Dropbox/PhD/datastories/data")
m <- leaflet()
m <- addProviderTiles(m, "Stamen.TonerLite", options = providerTileOptions(noWrap = TRUE) )
malls <- read.csv("shopping_malls.csv", stringsAsFactors = FALSE, header=T, na.strings=c("","NA"))
tmp <- malls[malls[,"open_close"]=="open" & !is.na(malls[,"lat"]) & malls[,"type"]=="mall",]
tmp$circle_size <- NA
minimo <- 5 #min circle size
massimo <- 30 #max circle size
tmp[!is.na(tmp[,"no_stores_mallwebsite"]),"circle_size"] <-
(tmp[!is.na(tmp[,"no_stores_mallwebsite"]),"no_stores_mallwebsite"]-min(tmp[,"no_stores_mallwebsite"], na.rm = T))*
(massimo/(max(tmp[,"no_stores_mallwebsite"], na.rm = T)-min(tmp[,"no_stores_mallwebsite"], na.rm = T))) +
minimo
tmp$circle_size
summary(tmp$circle_size)
m_malls <-
leaflet(data=tmp_malls()) %>%
addProviderTiles("Stamen.TonerLite", options = providerTileOptions(noWrap = TRUE) ) %>%
addCircleMarkers(~lon, ~lat, popup = ~as.character(name), radius= ~circle_size, stroke = FALSE, fillOpacity = 0.5)
m_malls <- leaflet(data=tmp) %>%
addProviderTiles("Stamen.TonerLite", options = providerTileOptions(noWrap = TRUE) ) %>%
addCircleMarkers(~lon, ~lat, popup = ~as.character(name), radius= ~circle_size, stroke = FALSE, fillOpacity = 0.5)
m_malls
rm(list = ls())
library(leaflet)
setwd("/Users/giacomodc/Dropbox/PhD/datastories/data")
m <- leaflet()
m <- addProviderTiles(m, "Stamen.TonerLite", options = providerTileOptions(noWrap = TRUE) )
malls <- read.csv("shopping_malls.csv", stringsAsFactors = FALSE, header=T, na.strings=c("","NA"))
tmp <- malls[malls[,"open_close"]=="open" & !is.na(malls[,"lat"]) & malls[,"type"]=="mall",]
tmp$circle_size <- NA
minimo <- 10 #min circle size
massimo <- 25 #max circle size
tmp[!is.na(tmp[,"no_stores_mallwebsite"]),"circle_size"] <-
(tmp[!is.na(tmp[,"no_stores_mallwebsite"]),"no_stores_mallwebsite"]-min(tmp[,"no_stores_mallwebsite"], na.rm = T))*
(massimo/(max(tmp[,"no_stores_mallwebsite"], na.rm = T)-min(tmp[,"no_stores_mallwebsite"], na.rm = T))) +
minimo
m_malls <- leaflet(data=tmp) %>%
addProviderTiles("Stamen.TonerLite", options = providerTileOptions(noWrap = TRUE) ) %>%
addCircleMarkers(~lon, ~lat, popup = ~as.character(name), radius= ~circle_size, stroke = FALSE, fillOpacity = 0.5)
m_malls
rm(list = ls())
library(leaflet)
setwd("/Users/giacomodc/Dropbox/PhD/datastories/data")
m <- leaflet()
m <- addProviderTiles(m, "Stamen.TonerLite", options = providerTileOptions(noWrap = TRUE) )
malls <- read.csv("shopping_malls.csv", stringsAsFactors = FALSE, header=T, na.strings=c("","NA"))
tmp <- malls[malls[,"open_close"]=="open" & !is.na(malls[,"lat"]) & malls[,"type"]=="mall",]
tmp$circle_size <- NA
minimo <- 8 #min circle size
massimo <- 20 #max circle size
tmp[!is.na(tmp[,"no_stores_mallwebsite"]),"circle_size"] <-
(tmp[!is.na(tmp[,"no_stores_mallwebsite"]),"no_stores_mallwebsite"]-min(tmp[,"no_stores_mallwebsite"], na.rm = T))*
(massimo/(max(tmp[,"no_stores_mallwebsite"], na.rm = T)-min(tmp[,"no_stores_mallwebsite"], na.rm = T))) +
minimo
m_malls <- leaflet(data=tmp) %>%
addProviderTiles("Stamen.TonerLite", options = providerTileOptions(noWrap = TRUE) ) %>%
addCircleMarkers(~lon, ~lat, popup = ~as.character(name), radius= ~circle_size, stroke = FALSE, fillOpacity = 0.5)
m_malls
